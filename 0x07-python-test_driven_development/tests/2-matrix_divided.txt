Test matrix_divided function.
========================================
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Case 1:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


Case 2:
	>>> matrix = [[1, 2, 5], [3, 5, 3]]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero


Case 3:
	>>> print(matrix_divided("school", 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Case 4:
	>>> matrix = [[1, "hello"], [3, 6]]
	>>> print(matrix_divided(matrix, 5))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Case 5:
	>>> matrix = [[1, 3, 5], [5, 6]]
	>>> print(matrix_divided(matrix, 5))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size


Case 6:
	>>> print(matrix_divided())
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

case 7:
	>>> print(matrix_divided(matrix))
        Traceback (most recent call last):
        TypeError: matrix_divided() missing 1 required positional argument: 'div'

Case 8:
	>>> matrix = [[1, 2], [3, 5]]
	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0, 0.0], [0.0, 0.0]]

Case 9:
	>>> print(matrix_divided(matrix, "hello"))
	Traceback (most recent call last):
	TypeError: div must be a number
